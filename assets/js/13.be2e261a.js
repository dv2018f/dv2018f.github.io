(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{721:function(s,n,a){s.exports=a.p+"assets/img/spi01.5865bcd8.png"},722:function(s,n,a){s.exports=a.p+"assets/img/spi03.7ef86f63.png"},723:function(s,n,a){s.exports=a.p+"assets/img/spi04.8d557ea3.png"},724:function(s,n,a){s.exports=a.p+"assets/img/spi05.9bdf8685.png"},766:function(s,n,a){"use strict";a.r(n);var e=a(5),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("div",{staticClass:"custom-block danger"},[e("p",{staticClass:"custom-block-title"},[s._v("概要")]),s._v(" "),e("p",[s._v("SPI全称叫做Service Provider Interface，服务提供接口。它是Java内置的一种服务提供发现机制，可以用来提高框架的扩展性。")])]),s._v(" "),e("h2",{attrs:{id:"一、spi是个什么鬼"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、spi是个什么鬼"}},[s._v("#")]),s._v(" "),e("strong",[s._v("一、SPI")]),s._v("是个什么鬼")]),s._v(" "),e("h3",{attrs:{id:"_1-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[s._v("#")]),s._v(" "),e("strong",[s._v("1 简介")])]),s._v(" "),e("p",[s._v("SPI全称叫做Service Provider Interface，服务提供接口。它是Java内置的一种服务提供发现机制，可以用来提高框架的扩展性。")]),s._v(" "),e("p",[s._v("怎么理解呢？简单理解就是在上层模块或者核心接口层中定义一个标准的服务接口，它没有实现，那谁来实现呢？有下层模块或者各个不同的服务提供方去实现这样的标准接口，如下图所示：")]),s._v(" "),e("p",[e("img",{attrs:{src:a(721),alt:"spi01"}})]),s._v(" "),e("p",[e("strong",[s._v("区别于"),e("strong",[e("strong",[s._v("API")])]),s._v("的概念：")])]),s._v(" "),e("p",[s._v("API （Application Programming Interface）在大多数情况下，都是实现方制定接口并完成对接口的实现，调用方仅仅依赖接口调用，且无权选择不同实现。 从使用人员上来说，API 直接被应用开发人员使用。")]),s._v(" "),e("p",[s._v("SPI （Service Provider Interface）是调用方来制定接口规范，提供给外部来实现，调用方在调用时则选择自己需要的外部实现。 从使用人员上来说，SPI 被框架扩展人员使用。")]),s._v(" "),e("h3",{attrs:{id:"_2-应用案例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-应用案例"}},[s._v("#")]),s._v(" "),e("strong",[s._v("2 应用案例")])]),s._v(" "),e("p",[s._v("如果还是没不理解的话，我这边举个非常常见的应用例子帮助大家理解。")]),s._v(" "),e("p",[s._v("我们都有用过jdbc连接数据吧，连接数据库需要驱动包，不同的数据库厂商，比如mysql或者oracle是不一样的。我们总不能在jdk中定义囊括所有的厂商实现吧，如配置是mysql，调用mysql的驱动，是oracle,调用oracle驱动，还要把各个厂商的驱动都内置进去，是不是非常ugly, 这时候我们的SPI机制派上用场了。")]),s._v(" "),e("ol",[e("li",[e("strong",[s._v("定义内置服务接口")])])]),s._v(" "),e("p",[s._v("JDK中定义了接口java.sql.Driver，并没有具体的实现，具体的实现都是由不同厂商来提供的。")]),s._v(" "),e("ol",[e("li",[e("strong",[s._v("不同产商各自实现内置服务接口")])])]),s._v(" "),e("ul",[e("li",[s._v("mysql厂商实现")])]),s._v(" "),e("p",[s._v("在mysql厂商提供的jar包"),e("code",[s._v("mysql-connector-java-6.0.6.jar")]),s._v("中，可以找到"),e("code",[s._v("META-INF/services")]),s._v("目录，该目录下会有一个名字为"),e("code",[s._v("java.sql.Driver")]),s._v("的文件，文件内容是"),e("code",[s._v("com.mysql.cj.jdbc.Driver")]),s._v("，这里面的内容就是针对Java中定义的接口的实现。")]),s._v(" "),e("ul",[e("li",[s._v("postgresql厂商实现")])]),s._v(" "),e("p",[s._v("在postgresql的jar包"),e("code",[s._v("postgresql-42.0.0.jar")]),s._v("中，也可以找到同样的配置文件，文件内容是"),e("code",[s._v("org.postgresql.Driver")]),s._v("，这是postgresql对Java的"),e("code",[s._v("java.sql.Driver")]),s._v("的实现。")]),s._v(" "),e("p",[s._v("等等，其他厂商类似。")]),s._v(" "),e("ol",[e("li",[e("strong",[s._v("使用实现")])])]),s._v(" "),e("p",[s._v("调用下面的方法，就会将对应的实现驱动通过SPI机制加载进来。")]),s._v(" "),e("div",{staticClass:"language-Plaintext line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-plaintext"}},[e("code",[s._v("Connection conn = DriverManager.getConnection(url,username,password);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("它是如何做到的呢？我们看下"),e("code",[s._v("DriverManager")]),s._v("的源码：")]),s._v(" "),e("div",{staticClass:"language-Plaintext line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-plaintext"}},[e("code",[s._v('public class DriverManager {\n    ......\n    /**\n     * Load the initial JDBC drivers by checking the System property\n     * jdbc.properties and then use the {@code ServiceLoader} mechanism\n     */\n    static {\n        loadInitialDrivers();\n        println("JDBC DriverManager initialized");\n    }\n    .....\n\n        private static void loadInitialDrivers() {\n        String drivers;\n        .....\n    \n        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n            public Void run() {\n                            //使用SPI的ServiceLoader来加载接口的实现\n                ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class);\n                Iterator<Driver> driversIterator = loadedDrivers.iterator();\n                try{\n                    while(driversIterator.hasNext()) {\n                        driversIterator.next();\n                    }\n                } catch(Throwable t) {\n                // Do nothing\n                }\n                return null;\n            }\n        });\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])]),e("ul",[e("li",[e("code",[s._v("DriverManager")]),s._v("类加载会先调用静态代码块中的"),e("code",[s._v("loadInitialDrivers()")]),s._v("方法。")]),s._v(" "),e("li",[e("code",[s._v("loadInitialDrivers()")]),s._v("方法中的"),e("code",[s._v("ServiceLoader.load()")]),s._v("方法就是jdk中对spi的实现，具体源码解读查看下一个章节。")])]),s._v(" "),e("p",[e("strong",[s._v("小结：")])]),s._v(" "),e("p",[s._v("此外还有一些其他使用SPI的例子，如下：")]),s._v(" "),e("ul",[e("li",[s._v("日志门面接口实现类加载，SLF4J加载不同提供商的日志实现类")]),s._v(" "),e("li",[s._v("Spring中大量使用了SPI,比如：对servlet3.0规范对ServletContainerInitializer的实现、自动类型转换Type Conversion SPI(Converter SPI、Formatter SPI)等")])]),s._v(" "),e("h3",{attrs:{id:"_3-核心思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-核心思想"}},[s._v("#")]),s._v(" "),e("strong",[s._v("3 核心思想")])]),s._v(" "),e("p",[s._v("通过上面的介绍和例子的讲解，我们可以知道SPI核心的思想就是"),e("strong",[s._v("解耦")]),s._v("。SPI机制将服务的具体实现转移到了程序外，为框架的扩展和解耦提供了极大的便利。")]),s._v(" "),e("h2",{attrs:{id:"二、jdk中spi实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、jdk中spi实现"}},[s._v("#")]),s._v(" 二、JDK中SPI实现")]),s._v(" "),e("h3",{attrs:{id:"_1-使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用"}},[s._v("#")]),s._v(" "),e("strong",[s._v("1 使用")])]),s._v(" "),e("p",[s._v("要使用jdk的SPI需要，需要遵循如下约定：")]),s._v(" "),e("ol",[e("li",[s._v("当服务提供者提供了接口的一种具体实现后，在jar包的META-INF/services目录下创建一个以“接口全限定名”为命名的文件，内容为实现类的全限定名；")]),s._v(" "),e("li",[s._v("接口实现类所在的jar包放在主程序的classpath中；")]),s._v(" "),e("li",[s._v("主程序通过java.util.ServiceLoder动态装载实现模块，它通过扫描META-INF/services目录下的配置文件找到实现类的全限定名，把类加载到JVM；")]),s._v(" "),e("li",[s._v("SPI的实现类必须携带一个不带参数的构造方法；")])]),s._v(" "),e("p",[e("strong",[s._v("直接上例子：")])]),s._v(" "),e("ol",[e("li",[s._v("定义一个服务接口")])]),s._v(" "),e("div",{staticClass:"language-Plaintext line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-plaintext"}},[e("code",[s._v("public interface Phone {\n    String getSystemInfo();\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ol",[e("li",[s._v("定义服务接口的实现")])]),s._v(" "),e("div",{staticClass:"language-Plaintext line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-plaintext"}},[e("code",[s._v('public class Huawei implements Phone {\n    @Override\n    public String getSystemInfo() {\n        return "Hong Meng";\n    }\n}\n\npublic class IPhone implements Phone {\n    @Override\n    public String getSystemInfo() {\n        return  "iOS";\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("ol",[e("li",[s._v("添加配置")])]),s._v(" "),e("ul",[e("li",[s._v("目录名必须是 META-INF/services")]),s._v(" "),e("li",[s._v("文件名是接口的全路径")])]),s._v(" "),e("p",[e("img",{attrs:{src:"SPI.assets/spi02.PNG",alt:"spi02"}})]),s._v(" "),e("ol",[e("li",[s._v("使用")])]),s._v(" "),e("ul",[e("li",[s._v("通过"),e("code",[s._v("ServiceLoader")]),s._v(" 加载实现类并调用服务")])]),s._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Test")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("test1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用ServiceLoader的load方法")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServiceLoader")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Phone")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" phoneServiceLoader "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServiceLoader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("load")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Phone")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Iterator")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Phone")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" iterator "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" phoneServiceLoader"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("iterator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("iterator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasNext")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Phone")]),s._v(" phone "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" iterator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("next")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"phone ...."')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("phone "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" systemInfo "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" phone"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSystemInfo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("systemInfo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[e("img",{attrs:{src:a(722),alt:"spi03"}})]),s._v(" "),e("h3",{attrs:{id:"_2-源码实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-源码实现"}},[s._v("#")]),s._v(" "),e("strong",[s._v("2 源码实现")])]),s._v(" "),e("p",[s._v("jdk中的SPI机制是通过"),e("code",[s._v("ServiceLoader")]),s._v("类实现的，通过调用"),e("code",[s._v("load()")]),s._v("方法实现对服务提供接口的查找，最后遍历来逐个访问服务提供接口的实现类。")]),s._v(" "),e("div",{staticClass:"language-Plaintext line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-plaintext"}},[e("code",[s._v('public final class ServiceLoader<S> implements Iterable<S>{\n    // 服务提供接口对应文件放置目录\n    private static final String PREFIX = "META-INF/services/";\n \n    // The class or interface representing the service being loaded\n    private final Class<S> service;\n \n    // 类加载器\n    private final ClassLoader loader;\n \n    // The access control context taken when the ServiceLoader is created\n    private final AccessControlContext acc;\n \n    // 按照初始化顺序缓存服务提供接口实例\n    private LinkedHashMap<String,S> providers = new LinkedHashMap<>();\n \n    // 内部类，实现了Iterator接口\n    private LazyIterator lookupIterator;\n\n\nprivate class LazyIterator\n        implements Iterator<S>\n    {\n\n        ... \n        private boolean hasNextService() {\n            if (nextName != null) {\n                return true;\n            }\n            if (configs == null) {\n                try {\n                    // 获取全路径地址\n                    String fullName = PREFIX + service.getName();\n                    if (loader == null)\n                        configs = ClassLoader.getSystemResources(fullName);\n                    else\n                        // 获取文件的内容\n                        configs = loader.getResources(fullName);\n                } catch (IOException x) {\n                    fail(service, "Error locating configuration files", x);\n                }\n            }\n            while ((pending == null) || !pending.hasNext()) {\n                if (!configs.hasMoreElements()) {\n                    return false;\n                }\n                pending = parse(service, configs.nextElement());\n            }\n            nextName = pending.next();\n            return true;\n        }\n\n        private S nextService() {\n            if (!hasNextService())\n                throw new NoSuchElementException();\n            String cn = nextName;\n            nextName = null;\n            Class<?> c = null;\n            try {\n                // 初始化\n                c = Class.forName(cn, false, loader);\n            } catch (ClassNotFoundException x) {\n                fail(service,\n                     "Provider " + cn + " not found");\n            }\n            if (!service.isAssignableFrom(c)) {\n                fail(service,\n                     "Provider " + cn  + " not a subtype");\n            }\n            try {\n                S p = service.cast(c.newInstance());\n                providers.put(cn, p);\n                return p;\n            } catch (Throwable x) {\n                fail(service,\n                     "Provider " + cn + " could not be instantiated",\n                     x);\n            }\n            throw new Error();          // This cannot happen\n        } \n        .... \n\n    }\n\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br")])]),e("ul",[e("li",[e("code",[s._v("ServiceLoader")]),s._v("实现了"),e("code",[s._v("Iterable")]),s._v("接口，所以它有迭代器的属性，这里主要都是实现了迭代器的"),e("code",[s._v("hasNext")]),s._v("和"),e("code",[s._v("next")]),s._v("方法。这里主要都是调用的"),e("code",[s._v("lookupIterator")]),s._v("的相应"),e("code",[s._v("hasNext")]),s._v("和"),e("code",[s._v("next")]),s._v("方法。")]),s._v(" "),e("li",[e("code",[s._v("LazyIterator")]),s._v("中的"),e("code",[s._v("hasNext")]),s._v("方法，静态变量PREFIX就是“"),e("code",[s._v("META-INF/services/")]),s._v("”目录，这也就是为什么需要在"),e("code",[s._v("classpath")]),s._v("下的"),e("code",[s._v("META-INF/services/")]),s._v("目录里创建一个以服务接口命名的文件。")]),s._v(" "),e("li",[s._v("最后，通过反射方法"),e("code",[s._v("Class.forName()")]),s._v("加载类对象，并用newInstance方法将类实例化，并把实例化后的类缓存到"),e("code",[s._v("providers")]),s._v("对象中，然后返回实例对象。")])]),s._v(" "),e("h3",{attrs:{id:"_3-小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结"}},[s._v("#")]),s._v(" "),e("strong",[s._v("3 小结")])]),s._v(" "),e("p",[s._v("JDK中的SPI机制思想非常好，很好的实现了解耦，但是也存在一些缺点：")]),s._v(" "),e("ul",[e("li",[s._v("不能按需加载，需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。")]),s._v(" "),e("li",[s._v("获取某个实现类的方式不够灵活，只能通过 Iterator 形式获取，不能根据某个参数来获取对应的实现类。")]),s._v(" "),e("li",[s._v("多个并发多线程使用 "),e("code",[s._v("ServiceLoader")]),s._v(" 类的实例是线程不安全的。")]),s._v(" "),e("li",[s._v("实现类必须要提供无参的构造方法。")])]),s._v(" "),e("h2",{attrs:{id:"三、spring中spi实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、spring中spi实现"}},[s._v("#")]),s._v(" 三、Spring中SPI实现")]),s._v(" "),e("p",[s._v("因为jdk中的SPI实现存在着一些不完美的地方，所有Spring借鉴了jdk的思想，自己实现了一套SPI机制。")]),s._v(" "),e("h3",{attrs:{id:"_1-使用-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用-2"}},[s._v("#")]),s._v(" "),e("strong",[s._v("1 使用")])]),s._v(" "),e("ol",[e("li",[s._v("创建一个服务接口")])]),s._v(" "),e("div",{staticClass:"language-Plaintext line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-plaintext"}},[e("code",[s._v("public interface Phone {\n    String getSystemInfo();\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ol",[e("li",[s._v("创建两个服务实现类")])]),s._v(" "),e("div",{staticClass:"language-Plaintext line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-plaintext"}},[e("code",[s._v('public class Huawei implements Phone {\n    @Override\n    public String getSystemInfo() {\n        return "Hong Meng";\n    }\n}\n\npublic class IPhone implements Phone {\n    @Override\n    public String getSystemInfo() {\n        return  "iOS";\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("ol",[e("li",[s._v("添加配置")])]),s._v(" "),e("ul",[e("li",[s._v("在项目META-INF/目录下创建spring.factories文件")]),s._v(" "),e("li",[s._v("文件内容key是接口的全限定名，value是实现类")])]),s._v(" "),e("p",[e("img",{attrs:{src:a(723),alt:"spi04"}})]),s._v(" "),e("div",{staticClass:"language-Plaintext line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-plaintext"}},[e("code",[s._v("#key是接口的全限定名，value是接口的实现类\ncom.alvin.error.spi.Phone=com.alvin.error.spi.Huawei,com.alvin.error.spi.IPhone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ol",[e("li",[s._v("使用")])]),s._v(" "),e("ul",[e("li",[s._v("调用"),e("code",[s._v("SpringFactoriesLoader.loadFactories")]),s._v("方法加载")])]),s._v(" "),e("div",{staticClass:"language-Plaintext line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-plaintext"}},[e("code",[s._v("@Test\npublic void test() {\n    // 调用SpringFactoriesLoader.loadFactories方法加载Phone接口所有实现类的实例\n    List<Phone> spis = SpringFactoriesLoader.loadFactories(Phone.class,\n            Thread.currentThread().getContextClassLoader());\n\n    // 遍历Phone接口实现类实例\n    for (Phone spi : spis) {\n        System.out.println(spi.getSystemInfo());;\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[e("img",{attrs:{src:a(724),alt:"spi05"}})]),s._v(" "),e("h3",{attrs:{id:"_2-源码实现-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-源码实现-2"}},[s._v("#")]),s._v(" "),e("strong",[s._v("2 源码")]),s._v("实现")]),s._v(" "),e("p",[s._v("Spring中使用"),e("code",[s._v("SpringFactoriesLoader")]),s._v("类实现了对SPI机制的支持。")]),s._v(" "),e("div",{staticClass:"language-Plaintext line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-plaintext"}},[e("code",[s._v('public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";\n// spring.factories文件的格式为：key=value1,value2,value3\n// 从所有的jar包中找到META-INF/spring.factories文件\n// 然后从文件中解析出key=factoryClass类名称的所有value值\npublic static List<String> loadFactoryNames(Class<?> factoryClass, ClassLoader classLoader) {\n    String factoryClassName = factoryClass.getName();\n    // 取得资源文件的URL\n    Enumeration<URL> urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));\n    List<String> result = new ArrayList<String>();\n    // 遍历所有的URL\n    while (urls.hasMoreElements()) {\n        URL url = urls.nextElement();\n        // 根据资源文件URL解析properties文件，得到对应的一组@Configuration类\n        Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));\n        String factoryClassNames = properties.getProperty(factoryClassName);\n        // 组装数据，并返回\n        result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));\n    }\n    return result;\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("ul",[e("li",[s._v("从classpath下的每个Jar包中搜寻所有"),e("code",[s._v("META-INF/spring.factories")]),s._v("配置文件")]),s._v(" "),e("li",[s._v("然后将解析properties文件，找到指定名称的配置后返回。需要注意的是，其实这里不仅仅是会去ClassPath路径下查找，会扫描所有路径下的Jar包，只不过这个文件只会在classpath下的jar包中")]),s._v(" "),e("li",[s._v("最后将扫描得到的类通过反射实例化")])]),s._v(" "),e("h2",{attrs:{id:"四、总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、总结"}},[s._v("#")]),s._v(" "),e("strong",[s._v("四、总结")])]),s._v(" "),e("p",[s._v("SPI技术将服务接口与服务实现分离以达到解耦，极大的提升程序的可扩展性。本文主要带大家理解了什么是SPI，然后分析了JDK和Spring中对SPI机制的支持。")])])}),[],!1,null,null,null);n.default=t.exports}}]);